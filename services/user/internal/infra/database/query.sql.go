// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package database

import (
	"context"
	"database/sql"
)

const createAddress = `-- name: CreateAddress :execresult
INSERT INTO commerce_ai.addresses (street, number, zip_code, city, country, state, user_id, created_at, updated_at)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
`

type CreateAddressParams struct {
	Street    sql.NullString
	Number    sql.NullString
	ZipCode   sql.NullString
	City      sql.NullString
	Country   sql.NullString
	State     sql.NullString
	UserID    int32
	CreatedAt sql.NullTime
	UpdatedAt sql.NullTime
}

func (q *Queries) CreateAddress(ctx context.Context, arg CreateAddressParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createAddress,
		arg.Street,
		arg.Number,
		arg.ZipCode,
		arg.City,
		arg.Country,
		arg.State,
		arg.UserID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
}

const createUser = `-- name: CreateUser :execresult
INSERT INTO commerce_ai.users (name, username, email, password, birth_date, created_at, updated_at)
VALUES (?, ?, ?, ?, ?, ?, ?)
`

type CreateUserParams struct {
	Name      string
	Username  string
	Email     string
	Password  string
	BirthDate sql.NullTime
	CreatedAt sql.NullTime
	UpdatedAt sql.NullTime
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createUser,
		arg.Name,
		arg.Username,
		arg.Email,
		arg.Password,
		arg.BirthDate,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
}

const deleteAddress = `-- name: DeleteAddress :exec
UPDATE commerce_ai.addresses
SET deleted_at = ?
WHERE id = ?
`

type DeleteAddressParams struct {
	DeletedAt sql.NullTime
	ID        int32
}

func (q *Queries) DeleteAddress(ctx context.Context, arg DeleteAddressParams) error {
	_, err := q.db.ExecContext(ctx, deleteAddress, arg.DeletedAt, arg.ID)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
UPDATE commerce_ai.users
SET deleted_at = ?
WHERE id = ?
`

type DeleteUserParams struct {
	DeletedAt sql.NullTime
	ID        int32
}

func (q *Queries) DeleteUser(ctx context.Context, arg DeleteUserParams) error {
	_, err := q.db.ExecContext(ctx, deleteUser, arg.DeletedAt, arg.ID)
	return err
}

const getAddress = `-- name: GetAddress :one
SELECT id, street, number, zip_code, city, country, state, user_id, created_at, updated_at, deleted_at FROM commerce_ai.addresses WHERE id = ? AND deleted_at IS NULL
`

func (q *Queries) GetAddress(ctx context.Context, id int32) (CommerceAiAddress, error) {
	row := q.db.QueryRowContext(ctx, getAddress, id)
	var i CommerceAiAddress
	err := row.Scan(
		&i.ID,
		&i.Street,
		&i.Number,
		&i.ZipCode,
		&i.City,
		&i.Country,
		&i.State,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, name, username, email, password, birth_date, created_at, updated_at, deleted_at FROM commerce_ai.users WHERE id = ?
`

func (q *Queries) GetUser(ctx context.Context, id int32) (CommerceAiUser, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i CommerceAiUser
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.BirthDate,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const listAddresses = `-- name: ListAddresses :many
SELECT id, street, number, zip_code, city, country, state, user_id, created_at, updated_at, deleted_at FROM commerce_ai.addresses WHERE user_id = ? AND deleted_at IS NULL
`

func (q *Queries) ListAddresses(ctx context.Context, userID int32) ([]CommerceAiAddress, error) {
	rows, err := q.db.QueryContext(ctx, listAddresses, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CommerceAiAddress
	for rows.Next() {
		var i CommerceAiAddress
		if err := rows.Scan(
			&i.ID,
			&i.Street,
			&i.Number,
			&i.ZipCode,
			&i.City,
			&i.Country,
			&i.State,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsers = `-- name: ListUsers :many
SELECT id, name, username, email, password, birth_date, created_at, updated_at, deleted_at FROM commerce_ai.users
`

func (q *Queries) ListUsers(ctx context.Context) ([]CommerceAiUser, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CommerceAiUser
	for rows.Next() {
		var i CommerceAiUser
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Username,
			&i.Email,
			&i.Password,
			&i.BirthDate,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAddress = `-- name: UpdateAddress :exec
UPDATE commerce_ai.addresses
SET street = ?, number = ?, zip_code = ?, city = ?, country = ?, state = ?, updated_at = ?
WHERE id = ?
`

type UpdateAddressParams struct {
	Street    sql.NullString
	Number    sql.NullString
	ZipCode   sql.NullString
	City      sql.NullString
	Country   sql.NullString
	State     sql.NullString
	UpdatedAt sql.NullTime
	ID        int32
}

func (q *Queries) UpdateAddress(ctx context.Context, arg UpdateAddressParams) error {
	_, err := q.db.ExecContext(ctx, updateAddress,
		arg.Street,
		arg.Number,
		arg.ZipCode,
		arg.City,
		arg.Country,
		arg.State,
		arg.UpdatedAt,
		arg.ID,
	)
	return err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE commerce_ai.users
SET name = ?, username = ?, email = ?, birth_date = ?, updated_at = ?
WHERE id = ?
`

type UpdateUserParams struct {
	Name      string
	Username  string
	Email     string
	BirthDate sql.NullTime
	UpdatedAt sql.NullTime
	ID        int32
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser,
		arg.Name,
		arg.Username,
		arg.Email,
		arg.BirthDate,
		arg.UpdatedAt,
		arg.ID,
	)
	return err
}
