// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package database

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :execresult
INSERT INTO commerce_user.users (name, username, email, password, birth_date, created_at, updated_at)
VALUES (?, ?, ?, ?, ?, ?, ?)
`

type CreateUserParams struct {
	Name      string
	Username  string
	Email     string
	Password  string
	BirthDate sql.NullTime
	CreatedAt sql.NullTime
	UpdatedAt sql.NullTime
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createUser,
		arg.Name,
		arg.Username,
		arg.Email,
		arg.Password,
		arg.BirthDate,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
}

const deleteUser = `-- name: DeleteUser :exec
UPDATE commerce_user.users
SET deleted_at = ?
WHERE id = ?
`

type DeleteUserParams struct {
	DeletedAt sql.NullTime
	ID        int32
}

func (q *Queries) DeleteUser(ctx context.Context, arg DeleteUserParams) error {
	_, err := q.db.ExecContext(ctx, deleteUser, arg.DeletedAt, arg.ID)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, name, username, email, password, birth_date, created_at, updated_at, deleted_at FROM commerce_user.users WHERE id = ?
`

func (q *Queries) GetUser(ctx context.Context, id int32) (CommerceUserUser, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i CommerceUserUser
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.BirthDate,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, name, username, email, password, birth_date, created_at, updated_at, deleted_at FROM commerce_user.users
`

func (q *Queries) ListUsers(ctx context.Context) ([]CommerceUserUser, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CommerceUserUser
	for rows.Next() {
		var i CommerceUserUser
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Username,
			&i.Email,
			&i.Password,
			&i.BirthDate,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :exec
UPDATE commerce_user.users
SET name = ?, username = ?, email = ?, birth_date = ?, updated_at = ?
WHERE id = ?
`

type UpdateUserParams struct {
	Name      string
	Username  string
	Email     string
	BirthDate sql.NullTime
	UpdatedAt sql.NullTime
	ID        int32
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser,
		arg.Name,
		arg.Username,
		arg.Email,
		arg.BirthDate,
		arg.UpdatedAt,
		arg.ID,
	)
	return err
}
